if(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
    cmake_policy(SET CMP0012 NEW)
endif(COMMAND cmake_policy)

if(POLICY CMP0003)
    cmake_policy(SET CMP0003 NEW)
endif()
if(POLICY CMP0012)
    cmake_policy(SET CMP0012 NEW)
endif()

set(CMAKE_TOOLCHAIN_FILE
    ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake
    CACHE STRING "Vcpkg toolchain file")
message("${CMAKE_CURRENT_SOURCE_DIR} @ ${CMAKE_TOOLCHAIN_FILE}")

project(ImportAsExternalProject)
cmake_minimum_required(VERSION 3.18)

set(CMAKE_CXX_STANDARD 20)
add_definitions(-std=c++20)
include(${CMAKE_CURRENT_LIST_DIR}/cmake/check.cmake)
find_package(Boost)
add_required_library(json11 fmt spdlog quill scn Catch2 pprint folly json11 FastFloat RapidJSON)
add_headonly_required_library(magic_get)
find_path(DBG_MACRO_INCLUDE_DIRS "dbg.h")
find_package(OpenMP REQUIRED)
if (OFF)
    add_test_library(quill quill)
    add_test_library(spdlog spdlog)
    add_test_library(scnlib scn scn::scn spdlog::spdlog)
    add_test_library(gtest GTest GTest::gtest_main fmt::fmt)
    add_test_library(folly folly GTest::gtest_main Folly::folly fmt::fmt)
    add_test_library(xtensor xtensor xtensor)
    add_test_library(catch Catch2)
endif ()
#add_test_library(baseflow fmt Catch2::Catch2 spdlog::spdlog pprint::pprint FastFloat::fast_float ${DBG_MACRO_INCLUDE_DIRS})
#add_test_library(faiss faiss fmt::fmt faiss)
#add_test_library(gflags gflags gflags_static fmt::fmt)
#add_test_library(dataframe DataFrame fmt::fmt DataFrame::DataFrame scn::scn ${RAPIDJSON_INCLUDE_DIRS} pthread)
add_test_library(cpp_feature fmt fmt::fmt)
message ("############### ${VCPKG_ROOT}#######")
find_package(zstd CONFIG REQUIRED)
find_package(Arrow CONFIG REQUIRED)
get_filename_component(MY_SEARCH_DIR ${Arrow_CONFIG} DIRECTORY)
find_package(Parquet CONFIG REQUIRED PATHS ${MY_SEARCH_DIR})
find_package(Thrift CONFIG REQUIRED)
add_test_library(arrow Arrow fmt::fmt parquet_static thrift::thrift ${ARROW_BUNDLED_STATIC_LIBS} arrow_static)
#add_test_library(abseil absl absl::any absl::base absl::strings absl::strings_internal fmt::fmt ${DBG_MACRO_INCLUDE_DIRS})
message("########### ${CMAKE_THREAD_LIBS_INIT}")
add_test_header_only_library(csv csv pthread fmt::fmt ${DBG_MACRO_INCLUDE_DIRS})
add_test_header_only_library(rapidcsv rapidcsv pthread fmt::fmt ${DBG_MACRO_INCLUDE_DIRS})
if (OFF)
    #add_test_library(cista cista fmt::fmt)
    add_test_library(tbb TBB TBB::tbb ${CMAKE_THREAD_LIBS_INIT})
    add_test_library(json11 json11 fmt::fmt ${JSON11_LIBRARIES})
    add_test_library(msgpack msgpack msgpackc msgpackc-cxx fmt::fmt)
    add_test_library(cuckoo libcuckoo libcuckoo)
    #add_test_library(macro boost)
    add_test_library(pybind11 pybind11 pybind11::lto pybind11::embed pybind11::module ${DBG_MACRO_INCLUDE_DIRS})
    add_test_library(hashmap benchmark fmt::fmt benchmark::benchmark)

    add_test_library_include(sockpp sockpp)
    add_test_library_include(rapidjson RapidJSON)
    add_test_header_only_library(nanobench nanobench)
    add_test_header_only_library(cpptoml cpptoml spdlog::spdlog)

    find_package(pybind11 CONFIG REQUIRED)
    pybind11_add_module(example test/test_pymodule.cpp)
    pybind11_add_module(cashflow test/cashflow.cpp)
endif ()
